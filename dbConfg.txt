# PostgreSQL Database Configuration for YardBase CRM

## Database Overview
YardBase CRM uses PostgreSQL as its primary database, managed via Prisma ORM. The schema is defined in `prisma/schema.prisma` and includes models for users, jobs, clients, estimates, and notes. The database is designed to support multi-role access (Admin, Employee, Client) with robust relational integrity.

### Key Models & Relationships
- **User**: Represents all users (admins, employees, staff). Has fields for `id`, `email`, `name`, `password`, `role` (enum: ADMIN, MANAGER, STAFF), and relations to jobs and notes.
- **Client**: Represents customers. Linked to jobs and estimates.
- **Job**: Represents scheduled work. Linked to a client, assigned employee (User), and creator (User). Has status, type, dates, and price.
- **Estimate**: Linked to a client and creator (User).
- **Note**: Linked to a job and creator (User). Used for job notes and tracking.

### Role-Based Access
- **Admin**: Full access to all tables and actions. Can manage users, jobs, clients, estimates, and notes.
- **Manager**: Can manage jobs, clients, and view all employees, but cannot manage admin users.
- **Staff/Employee**: Can view and update their own jobs and notes. Limited access to client data.
- **Client**: (Future) Will have limited access to their own jobs and estimates (not yet implemented).

### Prisma & Connection
- Prisma connects via the `DATABASE_URL` in `.env` (see below).
- All database operations are performed through the Prisma client (`src/lib/prisma.ts`).
- Migrations are managed via `npx prisma migrate dev`.
- Seeding is done via `prisma/seed.ts`.

### Authentication & Authorization
- **Authentication**: Handled by NextAuth.js. User sessions are checked in all API routes before DB access.
- **Authorization**: Enforced in API routes by checking `session.user.role` and `session.user.id` before allowing DB operations. The DB itself does not enforce row-level security; all access control is in the application layer.

### Best Practices
- Always run migrations after schema changes: `npx prisma migrate dev --schema=prisma/schema.prisma`
- Regenerate Prisma client after schema changes: `npx prisma generate --schema=prisma/schema.prisma`
- Use Prisma Studio (`npx prisma studio`) to inspect and debug data.
- Never expose raw passwords or sensitive data in API responses.
- Always check for user existence and permissions in API routes before DB operations.
- For troubleshooting, check both the Next.js terminal logs and Prisma errors.

### Troubleshooting
- **Connection errors**: Check `DATABASE_URL` in `.env` and ensure PostgreSQL is running.
- **Migration errors**: Ensure schema and DB are in sync. Use `prisma migrate resolve` if migrations are stuck.
- **Prisma errors**: Check for missing relations, enum mismatches, or invalid data.
- **Session errors**: Ensure NextAuth.js is configured and sessions are valid.

## Example .env
```
DATABASE_URL="postgresql://jake:password@localhost:5432/landscape_crm"
NEXTAUTH_SECRET=your-secret
NEXTAUTH_URL=http://localhost:3000
```

## Setup Steps (Recap)
1. Create the database and user (see commands above).
2. Set up `.env` with the correct `DATABASE_URL`.
3. Run migrations: `npx prisma migrate dev --name init`.
4. Seed the database: `npx prisma db seed` (optional).
5. Start the app: `npm run dev`.
6. Use Prisma Studio for DB inspection: `npx prisma studio`.
