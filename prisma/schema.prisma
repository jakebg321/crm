generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  name            String
  password        String
  role            UserRole   @default(STAFF)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  assignedJobs    Job[]      @relation("AssignedTo")
  createdJobs     Job[]      @relation("CreatedBy")
  createdEstimates Estimate[] @relation("CreatedEstimates")
  notes           Note[]     @relation("CreatedNotes")
  savedItems      SavedItem[] @relation("UserSavedItems")
  estimateTemplates EstimateTemplate[] @relation("UserEstimateTemplates")
  settings        UserSettings?
  assignedTasks   Task[]     @relation("AssignedTasksTo")
  createdTasks    Task[]     @relation("CreatedTasksBy")
}

model Client {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  phone     String
  address   String
  city      String
  state     String
  zipCode   String
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  estimates Estimate[]
  jobs      Job[]
}

model Job {
  id           String    @id @default(cuid())
  title        String
  description  String?
  status       JobStatus @default(PENDING)
  type         JobType?
  startDate    DateTime?
  endDate      DateTime?
  price        Float?
  clientId     String?
  assignedToId String?
  createdById  String
  estimateId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignedTo   User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  client       Client?   @relation(fields: [clientId], references: [id])
  createdBy    User      @relation("CreatedBy", fields: [createdById], references: [id])
  estimate     Estimate? @relation(fields: [estimateId], references: [id])
  notes        Note[]
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus @default(PENDING)
  priority     Priority   @default(MEDIUM)
  startDate    DateTime
  endDate      DateTime?
  assignedToId String?
  createdById  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assignedTo   User?      @relation("AssignedTasksTo", fields: [assignedToId], references: [id])
  createdBy    User       @relation("CreatedTasksBy", fields: [createdById], references: [id])
}

model Estimate {
  id          String         @id @default(cuid())
  title       String
  description String
  status      EstimateStatus @default(DRAFT)
  price       Float
  validUntil  DateTime
  clientId    String
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  client      Client         @relation(fields: [clientId], references: [id])
  createdBy   User           @relation("CreatedEstimates", fields: [createdById], references: [id])
  jobs        Job[]
  lineItems   LineItem[]
}

model LineItem {
  id          String   @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Float
  total       Float
  estimateId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  estimate    Estimate @relation(fields: [estimateId], references: [id])
}

model SavedItem {
  id          String   @id @default(cuid())
  description String
  unitPrice   Float
  quantity    Int      @default(1)
  category    String?  @default("Other")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserSavedItems", fields: [userId], references: [id])
  templateItems TemplateItem[]
}

model EstimateTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserEstimateTemplates", fields: [userId], references: [id])
  items       TemplateItem[]
}

model TemplateItem {
  id                String           @id @default(cuid())
  quantity          Int              @default(1)
  savedItemId       String
  estimateTemplateId String
  savedItem         SavedItem        @relation(fields: [savedItemId], references: [id])
  estimateTemplate  EstimateTemplate @relation(fields: [estimateTemplateId], references: [id])
}

model Note {
  id          String   @id @default(cuid())
  content     String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  completedAt DateTime?
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  createdBy   User     @relation("CreatedNotes", fields: [createdById], references: [id])
  createdById String
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  companySettings   String?  @db.Text
  estimateSettings  String?  @db.Text
  brandingSettings  String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum JobStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum JobType {
  LAWN_MAINTENANCE
  LANDSCAPE_DESIGN
  TREE_SERVICE
  IRRIGATION
  HARDSCAPING
  CLEANUP
  PLANTING
  FERTILIZATION
}

enum EstimateStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}
