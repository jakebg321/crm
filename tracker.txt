# YardBase CRM ‚Äì Project Overview & Developer Onboarding Guide

_Last updated: 2024-06-15_

---

## üìã Project Summary
YardBase CRM is a modern customer relationship management system built specifically for landscape businesses. It provides comprehensive tools for job scheduling, client management, employee management, estimates, and more. The system is designed with multi-role access (Admin, Manager, Staff, and future Client portal) with robust authentication and a modular, type-safe codebase. The application features a subscription-worthy feature set justifying a $200/month price point.

---

## üèóÔ∏è Architecture & Tech Stack
- **Frontend:** Next.js 14+ (App Router, React, TypeScript), Material-UI (MUI), Framer Motion
- **Backend:** Next.js API routes (App Router), Prisma ORM
- **Database:** PostgreSQL (schema in `prisma/schema.prisma`)
- **Authentication:** NextAuth.js (credentials provider, session-based)
- **Type Safety:** TypeScript throughout, custom types for session/user
- **Project Structure:** All code and config are inside the `/crm` folder

---

## üöÄ Current Features
- User authentication and session management
- Role-based user model (Admin, Manager, Staff)
- Job, client, and estimate management (CRUD)
- Scheduling/calendar with job assignment and filtering by employee
- Employee management (list, add, edit, delete)
- Job notes system (CRUD, inline editing)
- Estimates module with multi-step creation workflow
- Materials management with categorization and bulk operations
- Saved items system for quick estimate creation
- Email functionality with PDF generation for estimates
- Company branding and customization options (colors, logo, fonts)
- Estimate templates for saving groups of commonly used items
- Settings management with company profile and branding preferences
- Defensive error handling and robust API validation
- Modular, type-safe codebase

---

## üë• User Roles & Permissions
- **Admin:** Full access to all features and data (users, jobs, clients, estimates, notes)
- **Manager:** Manage jobs, clients, view all employees, but cannot manage admin users
- **Staff/Employee:** View/update their own jobs and notes, limited client data
- **Client:** (Planned) Will have limited access to their own jobs and estimates
- **Permissions are enforced in API routes** by checking `session.user.role` and `session.user.id` before DB operations

---

## ‚úÖ What Works
- Admins can manage all data
- Employees can view their assigned jobs and notes
- Schedule/calendar supports job assignment and filtering by employee
- Complete estimates management system with materials catalog
- Streamlined client creation within the estimate workflow
- Email system for sending estimates as PDF attachments
- All API endpoints require authentication and check user existence
- Proper UI layout and navigation integration
- Defensive coding and error handling throughout

## üõ†Ô∏è Recent Improvements

### UI/UX Enhancements
- **Fixed Navigation Integration:** Properly integrated navigation component with all pages
- **Layout Improvements:** Corrected spacing, padding, and margins to prevent content overlap
- **Card Interactivity:** Added hover effects and proper click handling to estimate cards
- **Action Button Handling:** Fixed action buttons to prevent triggering card clicks
- **User Profile Integration:** Ensured proper spacing for user profile dropdown
- **Empty States:** Added proper handling for empty states and loading conditions
- **Responsive Design:** Improved mobile and desktop layouts across all interfaces

### Estimate System Upgrades
- **PDF Generation:** Implemented PDF generation for estimates
- **Email Functionality:** Added ability to email estimates directly to clients
- **Status Management:** Automatic status transitions when sending estimates
- **Duplicate Function:** Ability to duplicate existing estimates
- **Search & Filter:** Enhanced search and filtering capabilities

### Branding & Customization
- **Company Branding:** Added company profile with logo, colors, and fonts
- **Theme Customization:** Implemented theme customization with saved preferences
- **White-Label Options:** Configurable branding elements throughout the application

### Technical Improvements
- **DOM Validation:** Fixed DOM nesting validation errors in components
- **Tooltip Integration:** Fixed tooltip wrapper issues with Material UI
- **Form Data Persistence:** Implemented form data persistence during navigation
- **API Robustness:** Enhanced error handling and validation in API endpoints
- **Type Safety:** Improved TypeScript typing throughout the application

## üõ†Ô∏è What Needs Work
- **Role-based UI:** Separate dashboards/pages for Admin, Employee, and (future) Client
- **Granular permissions:** Enforce permissions in all API routes (e.g., only admins can manage users, employees can only see their jobs)
- **Client portal:** Not yet implemented
- **Session/role propagation:** Ensure role is always present in session and available client/server-side
- **Integration tests:** Add tests for role-based access and permissions

---

## üõ°Ô∏è Roadmap: Role-Based Access & Permissions
1. **Define Roles & Permissions:** Finalize and document all role capabilities
2. **API Enforcement:** Audit and update all API routes for proper role checks
3. **Frontend UI/UX:** Refactor navigation and dashboards to show/hide features by role
4. **Client Portal:** Plan and scaffold a limited-access UI and API for clients
5. **Testing:** Add integration tests for permissions and role-based UI
6. **Documentation:** Keep this tracker and dbConfg.txt updated with all changes

---

## üßë‚Äçüíª Developer Onboarding Steps
1. **Clone the repo and `cd crm`**
2. **Install dependencies:** `npm install`
3. **Set up `.env`** with correct `DATABASE_URL`, `NEXTAUTH_SECRET`, `NEXTAUTH_URL`
4. **Run migrations:** `npx prisma migrate dev --name init`
5. **Seed the database:** `npx prisma db seed` (optional)
6. **Start the app:** `npm run dev`
7. **Inspect the DB:** `npx prisma studio`
8. **Review code structure:** Familiarize yourself with `/src/app`, `/prisma`, and `/components`
9. **Check tracker.txt and dbConfg.txt** for latest project state and guidance

---

## üõ†Ô∏è Troubleshooting Tips
- **Prisma errors:** Check for missing relations, enum mismatches, or invalid data
- **Connection errors:** Check `DATABASE_URL` and ensure PostgreSQL is running
- **Session errors:** Ensure NextAuth.js is configured and sessions are valid
- **API errors:** Check terminal logs for backend errors and browser console for frontend issues
- **After schema changes:** Run migrations and regenerate Prisma client
- **Restart dev server** after changes to `.env`, `next.config.js`, or Prisma schema
- **UI Layout Issues:** Check component nesting, z-index values, and padding/margin properties

---

## üß∞ Estimates Module Implementation Details

### 1. Estimates Overview
The estimates module provides a comprehensive solution for creating, managing, and tracking project estimates. Key features include:

- **Estimate Listing:** View all estimates with filtering and search capabilities
- **Multi-step Estimate Creation:** Guided workflow for creating detailed estimates
- **Line Item Management:** Add, edit, and remove line items with automatic total calculation
- **Materials Management:** Categorized materials catalog with bulk operations
- **Client Creation:** Create new clients directly within the estimate workflow
- **Saved Items:** Store and reuse common materials and services
- **Duplicate Function:** Clone existing estimates for similar projects
- **Status Tracking:** Track estimate status (Draft, Sent, Accepted, Rejected, Expired)
- **PDF Generation:** Create professional PDFs of estimates
- **Email Integration:** Send estimates directly to clients with PDF attachments

### 2. Database Models

#### Estimate Model
```prisma
model Estimate {
  id          String         @id @default(cuid())
  title       String
  description String
  status      EstimateStatus @default(DRAFT)
  price       Float
  validUntil  DateTime
  clientId    String
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  client      Client         @relation(fields: [clientId], references: [id])
  createdBy   User           @relation("CreatedEstimates", fields: [createdById], references: [id])
  jobs        Job[]
  lineItems   LineItem[]
}
```

#### LineItem Model
```prisma
model LineItem {
  id          String   @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Float
  total       Float
  estimateId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  estimate    Estimate @relation(fields: [estimateId], references: [id])
}
```

#### SavedItem Model
```prisma
model SavedItem {
  id          String   @id @default(cuid())
  description String
  unitPrice   Float
  quantity    Int      @default(1)
  category    String?  @default("Other")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserSavedItems", fields: [userId], references: [id])
  templateItems TemplateItem[]
}
```

#### EstimateTemplate Model
```prisma
model EstimateTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserEstimateTemplates", fields: [userId], references: [id])
  items       TemplateItem[]
}
```

#### UserSettings Model
```prisma
model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  companyName        String?
  companyLogo        String?
  primaryColor       String?
  secondaryColor     String?
  accentColor        String?
  fontPrimary        String?
  fontSecondary      String?
  addressLine1       String?
  addressLine2       String?
  city               String?
  state              String?
  zipCode            String?
  phoneNumber        String?
  emailAddress       String?
  website            String?
  taxRate            Float?   @default(0)
  defaultEstimateTerms String? @db.Text
  emailSignature     String? @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}
```

### 3. Materials Management System

The materials management system provides a dedicated interface for managing commonly used materials:

- **Located at `/estimates/materials`**
- **Features:**
  - Categorized materials organization (Landscaping, Garden, Hardscape, Tools, Equipment, etc.)
  - Category-based filtering and search functionality
  - Individual material creation with detailed attributes
  - Bulk materials import for efficient setup
  - Default quantity settings for each material
  - Integration with estimate creation workflow
  - Custom category management

- **Workflow:**
  1. Users can create materials individually with description, price, and category
  2. Bulk import allows adding multiple materials at once via CSV-like format
  3. Materials are categorized for easy filtering and organization
  4. During estimate creation, users can browse the materials catalog
  5. Users can add materials directly to estimates with predefined pricing

### 4. Estimate Creation Workflow

The estimate creation process uses a multi-step wizard approach:

#### Step 1: Client Selection
- **Select existing client from dropdown**
- **Create new client directly in the workflow:**
  - Complete client form with validation
  - Client information is saved and linked to the estimate
  - New client is automatically selected for the current estimate

#### Step 2: Estimate Details
- **Enter estimate title and description**
- **Set validity period for the estimate**
- **Input any special terms or conditions**

#### Step 3: Line Items
- **Add line items manually:**
  - Description
  - Quantity
  - Unit price
  - Automatic total calculation
- **Add items from saved materials catalog:**
  - Browse categorized materials
  - Search for specific materials
  - Add with predefined pricing and quantities
- **Add items from estimate templates:**
  - Save time by using predefined groups of items
  - Customize quantities as needed
- **Direct access to materials management**

#### Step 4: Review & Create
- **Review all estimate details:**
  - Client information
  - Estimate details
  - Line items list with quantities and pricing
  - Total price calculation
- **Create the estimate and save to the database**

### 5. Email & PDF Generation

The estimate email system allows users to send professional estimates directly to clients:

- **Email Interface:**
  - Accessible from estimate listing or detail view
  - Pre-filled recipient (client email), subject, and message
  - Option to send copy to sender
  - Professional formatting with company branding

- **PDF Generation:**
  - Creates professional PDF with company branding
  - Includes all estimate details and line items
  - Formats pricing information clearly
  - Includes terms and conditions
  - Shows company contact information

- **Status Management:**
  - Automatically updates estimate status from DRAFT to SENT when emailed
  - Tracks when emails are sent
  - Allows re-sending of estimates with notification

### 6. UI Components and Layout Improvements

Recent UI enhancements to the estimates module include:

- **Estimates Page Layout:**
  - Proper integration with Navigation component
  - Fixed padding and margins to prevent content overlap
  - Proper spacing for user profile dropdown
  - Responsive design for mobile and desktop

- **Estimate Cards:**
  - Enhanced interactivity with hover effects
  - Fixed action buttons to prevent triggering card clicks
  - Clear status indicators with appropriate colors
  - Improved spacing and typography

- **Search and Filtering:**
  - Improved search functionality by title or client
  - Clear empty states with helpful messages
  - Loading indicators during data fetching

- **Action Buttons:**
  - Tooltip-enabled action buttons for common operations
  - Email, edit, duplicate, and delete functions
  - Proper event propagation handling

### 7. API Architecture

The estimates module uses several API endpoints:

- `/api/estimates` - List, create, and filter estimates
- `/api/estimates/[id]` - Get, update, and delete specific estimates
- `/api/estimates/[id]/duplicate` - Clone existing estimates
- `/api/estimates/[id]/email` - Email estimates to clients
- `/api/saved-items` - Manage saved materials and line items
- `/api/saved-items/[id]` - Manage individual saved items
- `/api/estimate-templates` - Manage reusable estimate templates
- `/api/settings` - Manage user and company settings for branding

### 8. Future Enhancements

Planned enhancements for the estimates module:

- **Client Portal:** Allow clients to view and approve estimates online
- **Advanced Templates:** More powerful templating with sections and categories
- **Pricing Rules:** Dynamic pricing based on client type, project size, etc.
- **Historical Analytics:** Track estimate conversion rates and profitability
- **Integration with external accounting systems**
- **Digital Signature Support:** Allow clients to digitally sign and approve

---

## üõ£Ô∏è Long-Term Roadmap
- Full client portal implementation
- Advanced analytics and reporting
- Enhanced notifications system with email and SMS options
- Calendar integration with external services (Google, Outlook)
- Mobile application for field workers
- Offline capabilities for remote work areas
- More granular permissions (e.g., per-client, per-job)
- Integration with external services (payment processors, accounting)
- Automated testing and CI/CD

---

# End of Log (2024-06-15)
