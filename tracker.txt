# GreenLead ‚Äì Project Status & Bug Tracking

_Last updated: 2025-07-24_

---

## üìã Current Status Summary
GreenLead is a customer relationship management system for landscape businesses, featuring job scheduling, client management, estimates, and employee management. The system uses role-based access (Admin, Manager, Staff) with NextAuth authentication. The app is built with Next.js, Prisma ORM, and PostgreSQL.

---

## üî¥ Current Critical Issues

### 1. User Experience Improvements
- **Mobile responsiveness**: Staff views need optimization for field use
- **Performance optimizations**: Dashboard loading could be more efficient
- **Error state handling**: Improve user feedback for edge cases

### 2. Feature Enhancements
- **Advanced reporting**: Need more comprehensive business analytics
- **Client portal**: Future development of client-facing interface
- **Invoice generation**: Extend the estimate system to handle invoicing

---

## üü† Recently Fixed Issues

### 1. Authentication & Session Issues
- **Session data missing companyId**: Fixed JWT token to include companyId
- **Role-based redirection inconsistent**: Fixed redirection logic based on user roles
- **NextAuth session not propagating user data**: Corrected JWT and session callbacks
- **Hardcoded staff credentials**: Removed problematic hardcoding that bypassed security
- **Registration token issues**: Added companyId to registration JWT token

### 2. Multi-tenant Data Isolation
- **Employee data leakage**: Fixed serious security issue showing all companies' employees
- **Prisma errors when creating employees**: Added companyId to all employee operations
- **Missing company boundaries**: Added companyId filtering to all employee endpoints
- **Permission issues**: Improved role-based access control across the application

### 3. Development Tools
- **Mock data generation**: Added admin tool to generate realistic test data
- **Prisma enum handling**: Fixed enum type issues in job and estimate creation
- **Improved error messages**: Added descriptive error messages for easier debugging

---

## üü° In Progress Work

### 1. API Refinements
- **GraphQL consideration**: Evaluating benefits of GraphQL implementation
- **API documentation**: Creating comprehensive API documentation
- **Rate limiting**: Planning to implement rate limiting for API endpoints

### 2. Security Enhancements
- **CSRF protection**: Adding cross-site request forgery protections
- **Security headers**: Implementing additional security headers
- **Attack surface reduction**: Minimizing unnecessary API exposure

---

## üü¢ Tech Stack & Architecture

- **Frontend:** Next.js 14+ (App Router, React, TypeScript), Material-UI (MUI)
- **Backend:** Next.js API routes (App Router), Prisma ORM
- **Database:** PostgreSQL (schema in `prisma/schema.prisma`)
- **Authentication:** NextAuth.js (credentials provider, session-based)
- **Type Safety:** TypeScript throughout, custom types for session/user

---

## üõ†Ô∏è Current Features (Working)

- Public marketing homepage for unauthenticated users
- User authentication with role-based model (Admin, Manager, Staff)
- Job and estimate management (fully functional)
- Schedule views with calendar integration
- Route optimization using Google Maps API
- Job notes system
- Photo management for jobs
- Multi-tenant data isolation
- Mock data generation for testing

---

## üîß Debugging Notes & Solutions

### 1. Session & Authentication Fixes

#### Problem:
Authentication issues were causing API failures and incorrect redirects, particularly with missing companyId.

#### Solution:
1. Removed hardcoded staff credentials that bypassed normal authentication:
```typescript
// Old problematic code in auth.ts
if (credentials.email === 'staff@gmail.com' && credentials.password === 'staff') {
  return {
    id: "staff-user-id",
    name: "Staff User",
    email: "staff@gmail.com",
    role: "STAFF",
    // Missing companyId!
  };
}

// New solution: Removed hardcoding and always access the database
const user = await prisma.user.findUnique({
  where: { email: credentials.email },
});
if (!user) return null;

// Compare password
const isValid = await bcrypt.compare(credentials.password, user.password);
if (!isValid) return null;

// Return complete user object with companyId
return {
  id: user.id,
  name: user.name,
  email: user.email,
  role: user.role,
  companyId: user.companyId,
};
```

2. Fixed the staff creation endpoint to ensure proper companyId:
```typescript
// Create or find default company for staff users
let defaultCompany = await prisma.company.findFirst({
  where: { name: 'Demo Company' }
});

if (!defaultCompany) {
  defaultCompany = await prisma.company.create({
    data: { name: 'Demo Company' }
  });
}

// Create staff user with companyId
await prisma.user.create({
  data: {
    email: 'staff@gmail.com',
    name: 'Staff User',
    password: hashedPassword,
    role: UserRole.STAFF,
    companyId: defaultCompany.id, // Assign to company
  },
});
```

### 2. Multi-tenant Data Isolation

#### Problem:
Employee listings showed users from all companies, creating a major security issue.

#### Solution:
Updated all employee API endpoints to filter by companyId:

```typescript
// Filter employees by the current user's company ID
const employees = await prisma.user.findMany({
  where: {
    companyId: session.user.companyId, // Only show employees from same company
  },
  // ... other query parameters
});
```

Also added additional security checks:
```typescript
// Verify target employee exists and is in the same company
const targetEmployee = await prisma.user.findFirst({
  where: { 
    id: params.id,
    companyId: session.user.companyId // Ensure employee is from the same company
  },
});

if (!targetEmployee) {
  return NextResponse.json({ error: 'Employee not found or not in your company' }, { status: 404 });
}
```

### 3. Mock Data Generation

#### Problem:
No easy way to test the system with realistic data.

#### Solution:
Added a mock data generator with admin dashboard button:

```typescript
// Created API endpoint using appropriate Prisma enums
import { JobType, EstimateStatus, JobStatus } from '@prisma/client';

// Job types from schema - using proper enum values
const jobTypes = [
  JobType.LAWN_MAINTENANCE,
  JobType.LANDSCAPE_DESIGN,
  JobType.TREE_SERVICE,
  JobType.IRRIGATION,
  JobType.HARDSCAPING,
  JobType.CLEANUP,
  JobType.PLANTING,
  JobType.FERTILIZATION
];

// Added real addresses for mapping/routing functionality
const realLocations = [
  { city: 'New York', state: 'NY', zip: '10001' },
  { city: 'Los Angeles', state: 'CA', zip: '90001' },
  // ... more locations
];
```

---

## üó∫Ô∏è Next Steps & Priorities

### 1. High Priority
- **Complete API review**: Ensure all endpoints enforce company boundaries
- **Add unit tests**: Increase test coverage, particularly for authentication
- **Performance profiling**: Identify and fix potential performance bottlenecks

### 2. Medium Priority
- **Enhanced analytics**: Add more business intelligence features
- **User onboarding**: Improve first-time user experience
- **Email notifications**: Implement email notifications for key events

### 3. Low Priority
- **Theme customization**: Allow company-specific branding
- **Export/import functionality**: Add data export and import features
- **Integration APIs**: Build third-party integration endpoints

---

## ü§ñ Troubleshooting Steps

### For Authentication Issues
1. **Check console logs** for "Unauthorized" or session-related errors
2. **Inspect session data** in the browser (localStorage/cookies)
3. **Verify JWT token contains companyId** using browser devtools
4. **Check middleware.ts** for correct route protection logic
5. **Verify user creation** in registration flow (correct role and companyId)

### For API 401 Errors
1. **Check request headers** for presence of authentication cookies
2. **Inspect API endpoint code** for proper session validation
3. **Verify Prisma queries** include proper company filtering
4. **Log session data** at beginning of API route handlers
5. **Check database** for correct user-company associations

---

## üîç Key API Routes to Check

- `/api/auth/register`: Ensure proper company and user creation
- `/api/auth/[...nextauth]`: NextAuth configuration and callbacks
- `/api/employees`: Check for proper company ID filtering
- `/api/clients`: Verify company ID handling in client management
- `/api/mock-data`: Test data generation utility

---

## üìà Progress Tracking

| Issue | Status | Priority | Notes |
|-------|--------|----------|-------|
| Session missing companyId | Fixed | High | Updated NextAuth callbacks and removed hardcoded staff |
| Data leakage across companies | Fixed | Critical | Added companyId filtering to employee endpoints |
| Role-based redirection issues | Fixed | High | Corrected dashboard redirect logic |
| Debug role switcher causing problems | Fixed | Medium | Component completely disabled |
| Mock data generation | Completed | Medium | Added admin tool with configurable settings |
| API authorization security | Fixed | High | Improved company boundary enforcement |
| Client creation errors | Fixed | High | Added proper companyId to all creation requests |

---

# End of Current Status (2025-07-24)

