# GreenLead ‚Äì AI Integration Plan

_Last updated: 2025-08-10_

---

## üìã Current Status Summary
GreenLead is a CRM system for landscape businesses that needs to integrate OpenAI for enhancing the estimate creation process. The application is built with Next.js, Prisma ORM, and PostgreSQL, using role-based access (Admin, Manager, Staff) with NextAuth authentication.

---

## üîÑ AI Integration Overview

### 1. Primary Integration Goals
- **Smart Estimate Generation**: Use AI to create accurate estimates based on job descriptions
- **Price Optimization**: Analyze historical data to suggest optimal pricing
- **Material Recommendations**: Automatically suggest appropriate materials for specific job types
- **Natural Language Processing**: Allow users to describe jobs in plain language

### 2. Key Touchpoints for AI Integration
- **Estimate Creation Flow**: Add AI assistance during the estimate creation process
- **Line Item Generation**: Automate line item creation based on job descriptions
- **Client Communication**: Enhance estimate descriptions and client-facing language
- **Historical Data Analysis**: Use past jobs to improve estimate accuracy

---

## üöÄ Implementation Plan

### 1. Setup OpenAI Integration (High Priority)
- **Create OpenAI client wrapper**: Implement a reusable service for API calls
- **Environment configuration**: Set up API keys and model parameters
- **Rate limiting and caching**: Implement to manage API usage and costs
- **Error handling**: Create robust error management for API failures

### 2. Smart Estimate Generation (High Priority)
- **Create AI estimate endpoint**: New API route at `/api/ai/generate-estimate`
- **Job description analyzer**: Extract key services from natural language descriptions
- **Line item generator**: Convert analyzed services into appropriate line items
- **Price suggestion engine**: Recommend prices based on scope and historical data

### 3. Material Recommendations (Medium Priority)
- **Material database integration**: Connect AI to saved materials library
- **Context-aware suggestions**: Recommend materials based on job type and description
- **Quantity calculator**: Estimate required quantities based on job parameters
- **Alternative options**: Suggest multiple material options at different price points

### 4. UI Components for AI Integration (Medium Priority)
- **AI suggestion interface**: Add UI components to display and select AI suggestions
- **Natural language input fields**: Enhanced text areas for job descriptions
- **Confidence indicators**: Visual cues for AI suggestion reliability
- **Feedback mechanism**: Allow users to rate AI suggestions for continuous improvement

### 5. Training and Fine-tuning (Low Priority)
- **Company-specific data collection**: Gather historical estimate data for training
- **Custom model fine-tuning**: Adapt OpenAI models to landscape industry terminology
- **Feedback loop implementation**: Use user corrections to improve suggestions
- **Performance monitoring**: Track AI suggestion accuracy and adoption rates

---

## üõ†Ô∏è Technical Implementation Details

### OpenAI API Integration

```typescript
// src/lib/openai.ts
import { Configuration, OpenAIApi } from 'openai';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

export const openai = new OpenAIApi(configuration);

export async function generateEstimate(jobDescription: string, jobType: string) {
  try {
    const response = await openai.createChatCompletion({
      model: "gpt-4", // Or "gpt-3.5-turbo" for lower cost
      messages: [
        {
          role: "system",
          content: "You are an expert estimator for landscape services. Generate a detailed estimate with line items based on the job description."
        },
        {
          role: "user",
          content: `Job Type: ${jobType}\nDescription: ${jobDescription}\nGenerate a detailed estimate with appropriate line items, quantities, and suggested pricing.`
        }
      ],
      temperature: 0.7,
    });

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('OpenAI API error:', error);
    throw new Error('Failed to generate estimate with AI');
  }
}

export async function analyzeMaterialRequirements(jobDescription: string, area: number) {
  // Implementation for material analysis
}

export async function optimizePricing(lineItems: any[], clientInfo: any) {
  // Implementation for pricing optimization
}
```

### New API Endpoint for AI Estimates

```typescript
// src/app/api/ai/generate-estimate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { generateEstimate } from '@/lib/openai';
import { prisma } from '@/lib/prisma';

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { jobDescription, jobType, clientId } = await req.json();
    
    if (!jobDescription || !jobType || !clientId) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Get AI-generated estimate content
    const estimateContent = await generateEstimate(jobDescription, jobType);
    
    // Parse the AI response into structured line items
    const lineItems = parseAIEstimateResponse(estimateContent);
    
    // Return the structured estimate data
    return NextResponse.json({
      success: true,
      title: `${jobType} Estimate`,
      description: jobDescription,
      lineItems,
      suggestedPrice: calculateTotalPrice(lineItems),
    });
  } catch (error) {
    console.error('Error generating AI estimate:', error);
    return NextResponse.json(
      { error: 'Failed to generate estimate' },
      { status: 500 }
    );
  }
}

function parseAIEstimateResponse(aiResponse: string) {
  // Implementation to parse the AI text response into structured line items
}

function calculateTotalPrice(lineItems: any[]) {
  // Calculate total price from line items
}
```

### UI Component for AI-Assisted Estimate Creation

```typescript
// src/app/estimates/components/AIEstimateGenerator.tsx
import { useState } from 'react';
import {
  Box,
  Button,
  TextField,
  Typography,
  CircularProgress,
  Chip,
  Paper,
} from '@mui/material';
import AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';

interface AIEstimateGeneratorProps {
  onGenerateEstimate: (lineItems: any[]) => void;
  jobType: string;
  clientId: string;
}

export default function AIEstimateGenerator({ 
  onGenerateEstimate, 
  jobType,
  clientId 
}: AIEstimateGeneratorProps) {
  const [description, setDescription] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleGenerate = async () => {
    if (!description) return;
    
    setLoading(true);
    setError('');
    
    try {
      const response = await fetch('/api/ai/generate-estimate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jobDescription: description,
          jobType,
          clientId,
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate estimate');
      }
      
      const data = await response.json();
      onGenerateEstimate(data.lineItems);
    } catch (err) {
      setError(err.message || 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Paper sx={{ p: 3, mb: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <AutoFixHighIcon sx={{ mr: 1, color: 'primary.main' }} />
        <Typography variant="h6">AI Estimate Generator</Typography>
      </Box>
      
      <TextField
        fullWidth
        multiline
        rows={4}
        label="Describe the job in detail"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        placeholder="Example: Client needs a complete landscape renovation for their 2500 sq ft backyard, including new sod installation, a stone patio area approximately 400 sq ft, and 5 new shrubs along the fence line."
        sx={{ mb: 2 }}
      />
      
      {error && (
        <Typography color="error" sx={{ mb: 2 }}>
          {error}
        </Typography>
      )}
      
      <Button
        variant="contained"
        color="primary"
        startIcon={loading ? <CircularProgress size={20} color="inherit" /> : <AutoFixHighIcon />}
        onClick={handleGenerate}
        disabled={loading || !description}
        fullWidth
      >
        {loading ? 'Generating Estimate...' : 'Generate AI Estimate'}
      </Button>
      
      <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mt: 1 }}>
        The AI will analyze your description and suggest appropriate line items for your estimate.
      </Typography>
    </Paper>
  );
}
```

---

## üìù Integration with Existing Estimate Flow

### 1. Add AI Component to AddEstimateDialog.tsx
- Insert AIEstimateGenerator component in the Line Items step
- Add AI-generated items to the form state
- Provide feedback mechanism for accepted/rejected suggestions

### 2. Enhance Existing Line Item UI
- Add AI badges to AI-suggested items
- Provide confidence scores for suggestions
- Allow editing of AI-generated items

### 3. Implement Hybrid Workflow
- Enable users to start with AI suggestions and modify as needed
- Allow manual addition of items alongside AI suggestions
- Support complete manual override when necessary

---

## üîí Security & Privacy Considerations

### 1. Data Handling
- **Client Information**: Minimize sharing of client PII with OpenAI
- **Sanitization**: Implement input/output sanitization for API calls
- **Rate Limiting**: Prevent API abuse with proper rate limiting

### 2. API Security
- **Token Management**: Secure handling of OpenAI API keys
- **Authentication**: Ensure all AI endpoints require proper authentication
- **Request Validation**: Thorough validation of all incoming requests

### 3. Compliance
- **Terms of Service**: Ensure OpenAI usage complies with their terms
- **User Consent**: Obtain proper consent for AI processing
- **Data Retention**: Implement appropriate data retention policies

---

## üìà Success Metrics

| Metric | Target | Measurement Method |
|--------|--------|-------------------|
| Estimate Creation Time | 50% reduction | Compare avg. time before/after AI implementation |
| Estimate Accuracy | <5% manual adjustment | Track percentage of AI suggestions accepted without changes |
| User Adoption | 80% of users | Monitor percentage of estimates using AI features |
| Client Satisfaction | 20% increase | Survey clients on estimate clarity and detail |
| Conversion Rate | 15% increase | Track percentage of estimates accepted by clients |

---

## üõ£Ô∏è Implementation Roadmap

### Phase 1: Foundation (2 weeks)
- Set up OpenAI API integration
- Create core AI service functions
- Implement basic prompt engineering
- Develop estimate parsing logic

### Phase 2: Core Features (3 weeks)
- Build AI estimate generation endpoint
- Create UI components for estimate creation
- Implement line item suggestion engine
- Add material recommendation system

### Phase 3: Refinement (2 weeks)
- Improve prompt engineering based on initial results
- Implement pricing optimization
- Add confidence scoring for suggestions
- Create feedback collection mechanism

### Phase 4: Advanced Features (3 weeks)
- Develop custom model training pipeline
- Implement historical data analysis
- Add competitor pricing analysis
- Create detailed reporting on AI performance

---

# End of AI Integration Plan (2025-08-10)

