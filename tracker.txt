# YardBase CRM – Project Tracker & Developer Guide

## Project Overview
YardBase CRM is a modern, full-featured customer relationship management system tailored for landscape businesses. It provides dashboard analytics, job and client management, scheduling, estimates/invoicing, and employee management. The UI is built with Material-UI and a custom theme system for real-time, brand-aligned customization.

---

## Current Status (Audit: UI Consistency & Codebase)

### ✅ Core Setup Complete
- Next.js (TypeScript) project structure
- Material-UI with custom theme (palette: #000000, #253944, #293f4c, #389757, #f6f5f0, #f7f6f1, #f2f1ed, #f8f7f2)
- PostgreSQL database (see dbConfg.txt)
- Prisma ORM (see prisma/schema.prisma)
- NextAuth.js authentication (role-based, JWT)
- Protected routes and hooks

### ✅ Main Features Implemented
- Dashboard: Modern, animated, and fully themed (reference for all UI)
- Jobs: Listing, status, and management (uses theme, needs more dashboard-level polish)
- Clients: Listing, quick actions, and details (uses theme, needs more dashboard-level polish)
- Schedule: Basic page scaffolded (needs calendar and job integration)

### ⏳ In Progress / Needs Attention
- **UI/UX Consistency:**
  - Audit and refactor all pages/components to match dashboard's visual polish
  - Use theme palette, spacing, and typography everywhere
  - Add subtle animations, gradients, and hover effects to cards, tables, and buttons
- **Feature Expansion:**
  - Scheduling/calendar system
  - Estimates and invoicing workflows
  - Employee management
  - Communication (email/SMS, client portal)

---

## Recent Changes (Auth & Protection)
- Added full authentication flow using NextAuth.js with CredentialsProvider.
- All main app pages (Clients, Jobs, Schedule) are now protected:
  - Users are redirected to /login if not authenticated (client and server-side checks).
- Created a `/login` page that reuses the sign-in UI for consistent authentication experience.
- Database is seeded with demo users and data for immediate testing.
- SessionProvider is now included in the app provider tree for proper session management.

---

## Immediate Next Steps
1. **Create Account/Registration Form**
   - [ ] Build a user registration page ("Create Account")
   - [ ] Add backend logic to create new users securely (with hashed passwords)
   - [ ] Add validation and error handling for registration
2. **Job Management**
   - [ ] Enable adding new jobs from the UI
   - [ ] Connect job creation to the database and API
   - [ ] Allow editing and deleting jobs
3. **User-Specific Features**
   - [ ] Display jobs, clients, and data specific to the logged-in user
   - [ ] Add user profile page (view/update user info)
   - [ ] Add role-based access (admin vs. regular user)

---

## Technical Reference
- **Theme:** `/src/app/styles/theme.ts` (edit here for palette/typography)
- **Layout:** `/components/Layout.tsx` (shared app shell)
- **Database:** `/prisma/schema.prisma` (models)
- **Auth:** NextAuth.js config in `/src` (see README)
- **Seed Data:** `/prisma/seed.ts`

---

## Developer Notes
- Always use the theme for colors, spacing, and typography
- Reference the dashboard for UI/UX best practices
- Keep components modular and reusable
- Update this tracker as features progress

_Last Updated: [Update this date on each major change]_
