# PostgreSQL Database Configuration for GreenLead CRM

## Database Overview

GreenLead CRM uses PostgreSQL as its primary database, managed via Prisma ORM. The schema is defined in `prisma/schema.prisma` and includes models for companies, users, jobs, clients, estimates, notes, and other related entities. The database is designed to support **multi-tenant access** with complete data isolation between companies.

## Multi-Tenant Architecture

### Core Principle
Each company using GreenLead has its own isolated data set. This is achieved by:

1. **Company model**: The central entity that all other data relates to
2. **Direct company relationships**: Most models have a direct `companyId` field
3. **Indirect relationships**: Some models inherit company association through parent relationships
4. **API level enforcement**: All API routes enforce company boundaries in queries

### Data Isolation Enforcement
Data isolation between companies is enforced at multiple levels:

1. **Schema level**: Foreign key relationships ensure data integrity
2. **API level**: All queries include `companyId` filtering
3. **Session level**: The user's `companyId` is stored in the JWT token
4. **UI level**: Components only display data from the current company

## Data Models & Relationships

### Company
- **Purpose**: The root entity for multi-tenant isolation
- **Key Fields**: `id`, `name`, `createdAt`, `updatedAt`
- **Direct Relationships**:
  - One-to-many with User
  - One-to-many with Client
  - One-to-many with Job
  - One-to-many with Estimate

### User
- **Purpose**: Represents all users (admins, managers, staff)
- **Key Fields**: `id`, `email`, `name`, `password`, `role`, `companyId`
- **Relationships**:
  - Many-to-one with Company (REQUIRED)
  - One-to-many with Job (as creator)
  - One-to-many with Job (as assignee)
  - One-to-many with Estimate (as creator)
  - One-to-many with Note (as creator)
  - One-to-many with SavedItem (as creator)
  - One-to-many with EstimateTemplate (as creator)
  - One-to-many with Photo (as uploader)
  - One-to-many with Task (as creator)
  - One-to-many with Task (as assignee)
  - One-to-one with UserSettings

### Client
- **Purpose**: Represents customers/clients
- **Key Fields**: `id`, `name`, `email`, `phone`, `address`, `city`, `state`, `zipCode`, `companyId`
- **Relationships**:
  - Many-to-one with Company (REQUIRED)
  - One-to-many with Job
  - One-to-many with Estimate

### Job
- **Purpose**: Represents work assignments/projects
- **Key Fields**: `id`, `title`, `description`, `status`, `type`, `startDate`, `endDate`, `price`, `companyId`, `clientId`, `assignedToId`, `createdById`
- **Relationships**:
  - Many-to-one with Company (REQUIRED)
  - Many-to-one with Client (optional)
  - Many-to-one with User (assignee, optional)
  - Many-to-one with User (creator, REQUIRED)
  - Many-to-one with Estimate (optional)
  - One-to-many with Note
  - One-to-many with Photo

### Estimate
- **Purpose**: Represents price quotes for clients
- **Key Fields**: `id`, `title`, `description`, `status`, `price`, `validUntil`, `taxRate`, `terms`, `companyId`, `clientId`, `createdById`
- **Relationships**:
  - Many-to-one with Company (REQUIRED)
  - Many-to-one with Client (REQUIRED)
  - Many-to-one with User (creator, REQUIRED)
  - One-to-many with LineItem
  - One-to-many with Job

### Note
- **Purpose**: Tracks notes/updates for jobs
- **Key Fields**: `id`, `content`, `jobId`, `createdById`, `createdAt`
- **Relationships**:
  - Many-to-one with Job (REQUIRED)
  - Many-to-one with User (creator, REQUIRED)
  - Inherits `companyId` through Job relationship

### Photo
- **Purpose**: Stores job site photos
- **Key Fields**: `id`, `url`, `fileName`, `caption`, `photoType`, `jobId`, `uploaderId`
- **Relationships**:
  - Many-to-one with Job (REQUIRED)
  - Many-to-one with User (uploader, REQUIRED)
  - Inherits `companyId` through Job relationship

### SavedItem & EstimateTemplate
- **Purpose**: Reusable items for estimates
- **Relationships**:
  - Many-to-one with User (creator, REQUIRED)
  - Inherits `companyId` through User relationship

## Role-Based Access Control

### User Roles
- **ADMIN**: Full access to all company data, can manage users and settings
- **MANAGER**: Can manage jobs, clients, and staff, but cannot manage admin settings
- **STAFF**: Limited access to assigned jobs and own created content

### Access Control Rules
1. **Company separation**: Users can only access data from their own company
2. **Role-based filtering**:
   - ADMIN: Access to all company data
   - MANAGER: Access to all company data except admin settings
   - STAFF: Access limited to:
     - Jobs they created or are assigned to
     - Clients related to their jobs
     - Notes they created
     - Photos they uploaded

## API Implementation Guidelines

### Creating New Records
1. Always include `companyId` in direct models (User, Client, Job, Estimate)
2. For child models, ensure parent association exists and belongs to the same company
3. Validate authorization before creating:
   - Role permission check
   - Company boundary check 

### Querying Data
1. Always include `companyId` filter from the user's session
2. For STAFF users, apply additional filtering based on creation or assignment
3. For ADMIN/MANAGER users, only filter by company
4. Example query pattern:
   ```typescript
   const whereCondition = {
     companyId: session.user.companyId,
     ...(session.user.role === 'STAFF' ? {
       OR: [
         { createdById: session.user.id },
         { assignedToId: session.user.id }
       ]
     } : {})
   };
   ```

### Updating Records
1. First verify the record exists and belongs to the user's company
2. Check role-based permissions:
   - ADMIN/MANAGER: Can update any record in their company
   - STAFF: Can only update records they created or are assigned to
3. Verify any related records (e.g., clientId, assignedToId) also belong to the same company

### Security Best Practices
1. Always validate all input for API routes
2. Never return sensitive information (e.g., passwords)
3. Log all API errors with proper context
4. Never trust client-side input for permission checks

## Common Issues & Solutions

### Common Data Isolation Issues:
1. **Missing companyId**: Ensure all direct models include companyId
2. **Bypassed company check**: Always filter queries by company
3. **Incomplete session data**: Ensure JWT contains companyId
4. **Child record access**: Check parent relationships for indirect models

### Solutions:
1. Validate session contains companyId before any database operation
2. Use Prisma middleware or utility functions to automatically add companyId
3. Implement proper error handling with informative messages
4. Create automated tests to verify company isolation

## Database Migrations

When making changes to the schema:
1. Update `prisma/schema.prisma`
2. Run `npx prisma migrate dev --name your_change_name`
3. Update affected API routes to handle new fields/relationships
4. Test all affected endpoints to ensure company isolation is maintained

## Example .env Configuration
```
DATABASE_URL="postgresql://username:password@localhost:5432/greenleaddb"
NEXTAUTH_SECRET=your-jwt-secret-key
NEXTAUTH_URL=http://localhost:3000
```

---

This configuration ensures proper multi-tenant data isolation while maintaining all application functionality. The key principle is that every query must respect company boundaries, either through direct companyId filtering or indirect relationships. 